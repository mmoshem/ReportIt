<div class="container-fluid">
	<div class="row">
		<!-- Sidebar (Left) -->
		<div class="col-md-3 col-lg-3 p-3">
			<h3 class="text-center">Reports</h3>
			<div class="sidebar shadow-lg rounded-3 p-3 bg-white">
				<!--Filters-->
				<div class="mb-3 d-flex align-items-center">
					<InputText class="form-control mb-3 w-auto" Placeholder="Search by Address" @bind-Value="m_TextSearchAddress" @onchange="OnSearchTextChange" />
				</div>
				<div class="mb-3 d-flex align-items-center">
					<label class="form-label me-2"><strong>Status:</strong></label>
					<select @bind="m_SelectedStatus" class="form-control mb-3 w-auto">
						<option value="">All Statuses</option>
						<option value="Pending">Pending</option>
						<option value="Processing">Processing</option>
						<option value="Resolved">Resolved</option>
					</select>
				</div>
				<div class="mb-3 d-flex align-items-center">
					<label class="form-label me-2"><strong>From Date:</strong></label>
					<InputDate @bind-Value="m_DateFrom" class="form-control mb-3 w-auto" />
				</div>
				<div class="mb-3 d-flex align-items-center">
					<label class="form-label me-2"><strong>To Date:</strong></label>
					<InputDate @bind-Value="m_DateTo" class="form-control mb-3 w-auto" />
				</div>
				<!--List-->
				@if(Reports != null && Reports.Any())
				{
					<ul class="list-group">
						@foreach(Report report in Reports.Where(filter))
						{
							<li role="button" class="list-group-item list-group-item-action d-flex align-items-start @(m_SelectedReport == report ? "active" : "")"
							@onclick="() => reportSelected(report)" aria-current="true">
								<div class="ms-2 me-auto">
									<div class="fw-bold">@report.Address</div>
									@report.Category
								</div>
							</li>
						}
					</ul>
				}
				else
				{
					<p class="text-muted text-center">No reports available</p>
				}
			
			</div>
		</div>

		<!-- Map & Report Card (Right) -->
		<div class="col-md-9 col-lg-9">
			<!-- Map (Top-Right) -->
			<div class="row">
				<div class="col-12 mb-3">
					<div class="shadow-sm rounded-3 p-3 bg-light">
						<MapComponent @ref="m_mapComponent" />
					</div>
				</div>
			</div>

			<!-- Report Card (Bottom-Right) -->
			<div class="row">
				<div class="col-12">
					<div class="shadow-sm rounded-3 p-3 bg-white">
						<ReportCardComponent @ref="m_reportCard" CurrentReport="m_SelectedReport" IsManager="@IsManager" />
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public List<Report> Reports { get; set; }

	[Parameter]
	public bool IsManager { get; set; } = false;

	private Report m_SelectedReport = null;
	private MapComponent m_mapComponent;
	private ReportCardComponent m_reportCard;
	private string m_SelectedStatus;
	private Nullable<DateTime> m_DateFrom = DateTime.Today.AddMonths(-1);
	private Nullable<DateTime> m_DateTo = DateTime.Today;
	private string m_TextSearchAddress = string.Empty;

	private Nullable<DateTime> DateFrom
	{
		get => m_DateFrom;
		set
		{
			m_DateFrom = value;
			StateHasChanged();
		}
	}

	private Nullable<DateTime> DateTo
	{
		get => m_DateTo;
		set
		{
			m_DateTo = value;
			StateHasChanged();
		}
	}

	private async void reportSelected(Report i_SelectedReport)
	{
		if(m_SelectedReport == i_SelectedReport)
		{
			m_SelectedReport = null;
			await m_mapComponent.ClearAllMarkers();
		}
		else
		{
			m_SelectedReport = i_SelectedReport;
			m_reportCard.DescriptionText = m_SelectedReport.Description;
			m_reportCard.Status = m_SelectedReport.Status;
			await m_mapComponent.AddMarker(m_SelectedReport.Latitude, m_SelectedReport.Longitude, m_SelectedReport.Address);
		}
	}

	private void OnSearchTextChange(ChangeEventArgs eventArgs)
	{
		StateHasChanged();
	}

	private bool filter(Report i_Report)
	{
		bool isFiltered = string.IsNullOrEmpty(m_SelectedStatus) || (i_Report.Status == m_SelectedStatus);
		DateTime reportDate = i_Report.SubmissionDate.UtcDateTime;

		if(m_DateFrom.HasValue && m_DateTo.HasValue)
		{
			DateTime dateTo = m_DateTo.Value.AddDays(1); // Include the entire day for m_DateTo
			bool dateInRange = reportDate >= m_DateFrom.Value && reportDate < dateTo;

			isFiltered = isFiltered && dateInRange;
		}
		
		if(!string.IsNullOrEmpty(m_TextSearchAddress))
		{
			isFiltered = isFiltered && i_Report.Address.Contains(m_TextSearchAddress, StringComparison.OrdinalIgnoreCase);
		}

		return isFiltered;
	}
}